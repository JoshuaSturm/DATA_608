ggplot(mapping = aes(x = x)) +
stat_function(fun = function3, colour="blue") +
stat_function(fun = function31, colour="black") +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shade[,1],shade[,2]), fill="#4d535e", alpha=0.2)
#stat_function(fun=function3, geom="area", fill="#4d535e", alpha=0.2) +
#stat_function(fun=funcShaded3, geom="area", fill="#4d535e", alpha=0.2) +
#geom_rect(aes(xmin=0.50, xmax=1, ymin=0.50,ymax=1), fill="#4d535e", alpha=0.2)
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shade[,1],shade[,2]), fill="#4d535e", alpha=0.2)
#stat_function(fun=function3, geom="area", fill="#4d535e", alpha=0.2) +
#stat_function(fun=funcShaded3, geom="area", fill="#4d535e", alpha=0.2) +
#geom_rect(aes(xmin=0.50, xmax=1, ymin=0.50,ymax=1), fill="#4d535e", alpha=0.2)
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5), y=seq(0.5,0)))
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5), y=seq(0.5,0)), colour = "black")
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5, 2), y=seq(0.5,0, 2)), colour = "black")
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5), y=seq(0.5,0)), colour = "black")
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5,length.out = 2), y=seq(0.5,0)), colour = "black")
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5,length.out = 2), y=seq(0.5,0, length.out = 2)), colour = "black")
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5,length.out = 2), y=seq(0.5,0, length.out = 1)), colour = "black")
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5,length.out = 1), y=seq(0.5,0, length.out = 1)), colour = "black")
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5,length.out = 3), y=seq(0.5,0, length.out = 3)), colour = "black")
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5,length.out = 3), y=seq(0.5,0, length.out = 3)), colour = "#44659b")
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5,length.out = 3), y=seq(0.5,0, length.out = 3)), colour = "#44659b") +
geom_line(aes(x=seq(0.5,1,length.out = 3, y=seq(1,0.5,length.out = 3)), colour="#44659b"))
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5,length.out = 3), y=seq(0.5,0, length.out = 3)), colour = "#44659b") +
geom_line(aes(x=seq(0.5,1,length.out = 3), y=seq(1,0.5,length.out = 3)), colour="#44659b"))
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x = x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5,length.out = 3), y=seq(0.5,0, length.out = 3)), colour = "#44659b") +
geom_line(aes(x=seq(0.5,1,length.out = 3), y=seq(1,0.5,length.out = 3)), colour="#44659b")
function3 <- function(x) x + 1/2
function31 <- function(x) x - 1/2
shadedx <- c(0,0,0.5,1,1,0.5)
shadedy <- c(0,0.5,1,1,0.5,0)
shadedf <- cbind(shadedx, shadedy)
ggplot(mapping = aes(x)) +
stat_function(fun = function3) +
stat_function(fun = function31) +
xlim(0, 1) +
ylim(0, 1) +
geom_polygon(aes(shadedf[,1],shadedf[,2]), fill="#4d535e", alpha=0.2) +
geom_line(aes(x=seq(0,0.5,length.out = 3), y=seq(0.5,0, length.out = 3)), colour = "#44659b") +
geom_line(aes(x=seq(0.5,1,length.out = 3), y=seq(1,0.5,length.out = 3)), colour="#44659b")
ggplot() +
xlim(0, 1) +
ylim(0, 1) +
geom_rect(aes(xmin=0, xmax=0.5, ymin=0,ymax=0.5), fill="#4d535e", alpha=0.2)
ggplot() +
xlim(0, 0.75) +
ylim(0, 0.75) +
geom_rect(aes(xmin=0, xmax=0.5, ymin=0,ymax=0.5), fill="#4d535e", alpha=0.2)
ggplot() +
xlim(0, 0.6) +
ylim(0, 0.6) +
geom_rect(aes(xmin=0, xmax=0.5, ymin=0,ymax=0.5), fill="#4d535e", alpha=0.2)
install.packages(c("DBI", "httpuv", "lubridate", "openssl", "PerformanceAnalytics", "pillar", "quanteda", "RcppArmadillo", "RcppParallel", "rmarkdown", "RMySQL", "selectr", "tidyselect", "yaml"))
install.packages(c("DBI", "httpuv", "lubridate", "openssl", "PerformanceAnalytics", "pillar", "quanteda", "RcppArmadillo", "RcppParallel", "rmarkdown", "RMySQL", "selectr", "tidyselect", "yaml"))
install.packages(c("DBI", "httpuv", "lubridate", "openssl", "PerformanceAnalytics", "pillar", "quanteda", "RcppArmadillo", "RcppParallel", "rmarkdown", "RMySQL", "selectr", "tidyselect", "yaml"))
install.packages(c("DBI", "httpuv", "lubridate", "openssl", "PerformanceAnalytics", "pillar", "quanteda", "RcppArmadillo", "RcppParallel", "rmarkdown", "RMySQL", "selectr", "tidyselect", "yaml"))
install.packages(c("DBI", "httpuv", "lubridate", "openssl", "PerformanceAnalytics", "pillar", "quanteda", "RcppArmadillo", "RcppParallel", "rmarkdown", "RMySQL", "selectr", "tidyselect", "yaml"))
setwd("~/GitHub/CUNY_MSDS_Semester_2/DATA_608/Project 3")
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("CDC"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
library(shiny)
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("CDC"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
#
#
#
library(shiny)
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("CDC"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
runApp('DATA_608_Project_3_q1')
print(psych::describe(cdc))
print(head(cdc))
print(colSums(is.na(cdc)))
?sub
runApp('DATA_608_Project_3_q1')
runApp('DATA_608_Project_3_q1')
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv")
library(dplyr)
cdc <- cdc %>%
filter(Year == 2010)
View(cdc)
table(cdc$ICD.Chapter, cdc$Crude.Rate)
table(cdc$ICD.Chapter)
rowsum(cdc
$ICD.Chapter)
rowsum(cdc$ICD.Chapter)
colSums(cdc$ICD.Chapter)
str(cdc$ICD.Chapter)
glimpse(cdc$ICD.Chapter)
aggregate(cdc)
aggregate(cdc$ICD.Chapter)
vapply(cdc, colSums)
vapply(cdc, colSums())
?apply
apply(cdc, 1, sum)
apply(cdc, 2, sum)
lapply(cdc, sum)
lapply(cdc, 1, sum)
View(table(cdc))
View(table(cdc$ICD.Chapter))
lapply(cdc[,1], count)
sample(cdc[,1])
sample(cdc[,1],size = 1)
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
filter(Year == 2010, ICD.Chapter == 'Diseases of the circulatory system')
View(cdc)
library(plotly)
View(cdc)
# Read in the dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv")
View(cdc)
View(cdc)
runApp('DATA_608_Project_3_q1')
names(cdc)
names(cdc[1])
names(cdc[,1])
rownames(cdc)
rownames(cdc$ICD.Chapter)
unique(row.names(cdc$ICD.Chapter))
unique(cdc$ICD.Chapter)
unique(cdc$ICD.Chapter)[1]
unique(cdc$ICD.Chapter)[[1]]
unique(cdc$ICD.Chapter)[1][1]
unique(cdc$ICD.Chapter)[[1]][1]
runApp('DATA_608_Project_3_q1')
vapply(cdc$ICD.Chapter, unique)
vapply(cdc$ICD.Chapter, unique())
lapply(cdc$ICD.Chapter, unique)
apply(cdc$ICD.Chapter, unique)
sapply(cdc$ICD.Chapter, unique)
unique(sapply(cdc$ICD.Chapter, unique))
data.frame(unique(cdc$ICD.Chapter))
j <- data.frame(unique(cdc$ICD.Chapter))
View(j)
lapply(j, print)
vapply(j, print)
sapply(j, print)
apply(j, print)
apply(j, 1,print)
cdc$ICD.Chapter <- as.character(cdc$ICD.Chapter)
runApp('DATA_608_Project_3_q1')
rm(j)
runApp('DATA_608_Project_3_q1')
runApp('DATA_608_Project_3_q1')
library(ggplot2)
runApp('DATA_608_Project_3_q1')
runApp('DATA_608_Project_3_q1')
runApp('DATA_608_Project_3_q1')
runApp('DATA_608_Project_3_q1')
runApp('DATA_608_Project_3_q1')
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
filter(Year == 2010)
View(cdc)
runApp('DATA_608_Project_3_q1')
View(cdc)
View(cdc)
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
select(1, 2, 6)
View(cdc)
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
select(1, 2, 6) %>%
filter(Year == 2010) %>%
arrange(desc(3))
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
select(1, 2, 6) %>%
filter(Year == 2010) %>%
arrange(desc(3))
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
select(1, 2, 6) %>%
filter(Year == 2010) %>%
arrange(desc())
# Read in the dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
select(1, 2, 6) %>%
filter(Year == 2010) %>%
arrange(desc(3))
# Read in the dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
select(1, 2, 6) %>%
filter(Year == 2010) %>%
arrange(desc(3))
View(cdc)
View(cdc)
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
select(1, 2, 6) %>%
filter('Year' == 2010) %>%
arrange(desc(3))
# Read in the dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
select(1, 2, 6) %>%
filter(Year == 2010) %>%
arrange(desc(3))
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
select(1, 2, 6) %>%
filter(Year == 2010) #%>%
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
filter(Year == 2010) %>%
select(1, 2, 6) #%>%
View(cdc)
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
filter(Year == 2010) %>%
select(1, 2, 6) %>%
arrange(desc(3))
# Read in the dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
filter(Year == 2010) %>%
select(1, 2, 6) %>%
arrange(desc(3))
# Keep only cases from 2010
# From a random sample, we'll use 'Diseases of the circulatory system'
cdc <- cdc %>%
filter(Year == 2010) %>%
select(1, 2, 6) %>%
arrange(desc(Crude.Rate))
View(cdc)
# Convert to character to simplify listing input
#cdc$ICD.Chapter <- as.character(cdc$ICD.Chapter)
cdc.grouped <- cdc %>%
group_by(input$Cause)
# Convert to character to simplify listing input
#cdc$ICD.Chapter <- as.character(cdc$ICD.Chapter)
cdc.grouped <- cdc %>%
group_by(input$Cause)
runApp('DATA_608_Project_3_q1')
runApp('DATA_608_Project_3_q1')
View(cdc)
runApp('DATA_608_Project_3_q1')
runApp('DATA_608_Project_3_q1')
runApp('DATA_608_Project_3_q1')
runApp('DATA_608_Project_3_q1')
devtools::install_github('ropensci/plotly')
library(plotly)
library(dplyr)
library(ggplot2)
library(plotly)
