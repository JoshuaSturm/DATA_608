},
Sys.sleep(3))
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:3),
function(url){
url %>%
read_html() %>%
html_nodes('.biz-phone')
url
},
Sys.sleep(3))
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:3),
function(url){
url %>%
read_html() %>%
html_nodes('.biz-phone')
})
yelp.phone
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:3),
function(url){
url %>%
read_html() %>%
html_nodes('.biz-phone')
})
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:3),
function(url){
url %>%
read_html() %>%
html_nodes('.biz-phone'),
Sys.sleep(3)
})
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:3),
function(url){
url %>%
read_html() %>%
html_nodes('.biz-phone')
Sys.sleep(3)
})
yelp.phone
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:3),
function(url){
url %>%
read_html() %>%
html_nodes('.biz-phone')
Sys.sleep(3)
url
})
yelp.phone
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:3),
function(url){
url %>%
read_html() %>%
html_nodes('.biz-phone')
}Sys.sleep(3))
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:3),
function(url){
url %>%
read_html() %>%
html_nodes('.biz-phone')
},Sys.sleep(3))
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:3),
function(url){
url %>%
read_html() %>%
html_nodes('.biz-phone')
})
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:3),
function(url){
Sys.sleep(3)
url %>%
read_html() %>%
html_nodes('.biz-phone')
})
yelp.phone
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:99),
function(url){
Sys.sleep(3)
url %>%
read_html() %>%
html_nodes('.biz-phone')
}
)
yelp.phone
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:99),
function(url){
Sys.sleep(3)
trycatch({
url %>%
read_html() %>%
html_nodes('.biz-phone')},
error = function(e) NA)
}
)
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:99),
function(url){
Sys.sleep(3)
tryCatch({
url %>%
read_html() %>%
html_nodes('.biz-phone')},
error = function(e) NA)
} r
yelp.phone <- lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:99),
function(url){
Sys.sleep(3)
tryCatch({
url %>%
read_html() %>%
html_nodes('.biz-phone')},
error = function(e) NA)
}
)
head(yelp.phone)
tail(yelp.phone)
dim(yelp.phone)
View(yelp.phone)
View(yelp.phone)
yelp.phone[[100]]
yelp.phone[[1]]
yelp.rating <-   lapply(paste0('https://www.yelp.com/search?find_loc=new+york+city,+ny&start=', 0:99),
function(url){
Sys.sleep(3)
tryCatch({
url %>%
read_html() %>%
html_nodes(xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "rating-large", " " ))]')},
error = function(e) NA)
})
combo <- rbind(yelp.rating, yelp.phone)
combo <- data.frame(combo)
head(combo)
combo
View(combo)
View(combo)
combo <- rbind(yelp.rating, yelp.phone)
head(combo)
head(unlist(combo))
as.data.frame(combo)
combo <- merge(yelp.phone, yelp.rating)
knitr::opts_chunk$set(echo = T,
cache = T,
stringsAsFactors = F)
combo <- merge(yelp.phone, yelp.rating, stringsAsFactors = F)
tab <- html_table(yelp.phone, fill = T)
tab <- html_table(yelp.phone)
typeof(yelp.phone)
typeof(yelp.rating)
yelp.phone %>%
map(xml_attrs) %>%
map_df(~as.list(.))
df <- data.frame(yelp.phone, yelp.rating)
comb <- xmlToDataFrame(yelp.phone)
XML:::xmlAttrsToDataFrame(yelp.phone)
combo <- as.character(yelp.phone)
combo <- unlist(yelp.phone)
combo <- data.frame(combo)
xml_text(yelp.phone)
xml_text(combo)
XML::xmlValue(yelp.phone)
XML::xmlValue(combo)
head(yelp.phone)
yelp.phone[[1]]
yelp.phone[[1]][1]
library(stringr)
library(stringr)
str_extract_all(yelp.phone[[1]], '\\D+')
yelp.phone[[1]]
str_extract_all(yelp.phone[[1]], '.*(\\D+).*')
str_extract_all(yelp.phone[[1]], '.*|\n*(\\D+).*')
strcapture('.*\\D+.*', yelp.phone[[1]])
str_extract(yelp.phone[[1]], '.*^\\D+$.*')
str_extract(yelp.phone[[1]], '.*^\\D+$')
yelp.phone[[1]]
str_extract_all(yelp.phone[[1]], '.*^\\D+$')
str_extract_all(yelp.phone[[1]], '.*^\\D+$\n*')
yelp.phone[[1]]
str_extract_all(yelp.phone[[1]], '.*^\\d+$\n*')
str_extract_all(yelp.phone[[1]], '\\d{3,}')
combo <- str_extract_all(yelp.phone[[1]], '\\d{3,}')
combo
combo[1]
combo[1] <- merge(combo[1])
combo[1] <- bind_rows(combo[1])
combo[1] <- bind_cols(combo[1])
combo <- bind_cols(combo[1])
combo <- bind_cols(combo)
combo[1]
combo[2]
data.table::rbindlist(combo[1])
data.table::rbindlist(combo)
dim(combo[1])
nrow(combo[1])
NROW(combo[1])
NCOL(combo[1])
ncol(combo[1])
typeof(combo)
typeof(combo[1])
paste0(combo[1])
combo[1]
paste(combo[1], collapse = "")
cl <- paste0(combo)
cl
cl[1]
paste(combo, sep = '', collapse = '')
paste(combo[1], sep = '', collapse = '')
combo[1]
unlist(combo[1])
as.data.frame.integer(combo[1])
combo[1]
as.integer(combo[1])
as.double(combo[1])
as.vector(combo[1])
as.matrix(combo[1])
as.data.frame(combo[1])
combo[1]
str_c(combo[1])
str_c(combo[1], collapse = "")
str_c(combo[1], collapse = ",")
paste(combo[1], sep = "", collapse = "")
vec<-unlist(combo[1])
vec[which(c(1,diff(vec)) != 0)]
vec<-unlist(combo)
vec[which(c(1,diff(vec)) != 0)]
unlist(combo[1])
list(combo[1])
unique(combo[1])
Reduce(combo[1])
Reduce(c, combo[1])
paste0(combo[1])
unlist(combo[1])
str_c(combo[1])
paste0(combo[1], sep = "")
combo[1]
dim(combo[1])
NROW(combo[1])
NCOL(combo[1])
do.call(rbind, combo[1])
do.call("rbind", combo[1])
typeof(combo)
typeof(combo[2])
rbind.fill(combo[1])
rbind(combo[1])
merge(combo)
unite(combo[1])
gather(combo)
melt(combo)
reshape2::melt(combo)
reshape2::melt(combo[1])
paste0(combo[1])
cl <- paste0(combo[1])
cl
typeof(cl)
paste0(cl)
install.packages("DT")
yelp.phone
unlist(str_extract_all(string = combo[1], pattern = '^\\d{3,}$'))
combo
combo <- yelp.phone
combo[1]
unlist(str_extract_all(combo[1]))
unlist(str_extract_all(combo[1], '\\d{3,}'))
combo[1]
str_extract_all(combo[1], '\\d+')
str_extract_all(combo[1], '.*\\d{3,}')
str_extract_all(combo[1], '.*(\\d{3,})')
combo[1]
combo[[1]]
combo[[1]][1]
cl <- combo[[1]][1]
cl
str_extract_all(cl, '\\d')
unlist(str_extract_all(cl, \\d))
unlist(str_extract_all(cl, '\\d'))
data.frame(unlist(str_extract_all(cl, '\\d')))
cl
cl <- str_extract_all(cl, '\\d+')
cl
trimws(cl)
cl
gsub("", "", cl)
as.numeric(unlist(cl))
rbind(cl)
cl
cl <- as.numeric(unlist(cl))
cl
trimws(cl)
as.integer(cl)
Reduce(union, cl)
unite(cl)
paste0(cl)
cl
paste(cl, collapse="")
combo[[1]]
combo[[1]][1]
cl <- combo[[1]][1]
cl
str_extract_all(cl, '\\d')
cl <-str_extract_all(cl, '\\d')
cl
paste0(cl)
paste(cl, collapse = "")
as.integer(cl)
as.integer(unlist(cl))
cl <- as.integer(unlist(cl))
cl
paste0(cl)
paste(cl, collapse="")
par(mfrow = c(1,2))
hist(m10$residuals)
m8 <- lm(runs ~ new_onbase, data = mlb11)
par(mfrow = c(1,2))
hist(m10$residuals)
library(tidyverse)
library(ggplot2)
load("more/mlb11.RData")
ggplot(mlb11, aes(x=at_bats, y=runs)) +
geom_point(colour="green")
cor(mlb11$runs, mlb11$at_bats)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
m1 <- lm(runs ~ at_bats, data = mlb11)
summary(m1)
plot_ss(x = mlb11$homeruns, y = mlb11$runs, showSquares = TRUE)
cor(mlb11$runs, mlb11$homeruns)
m2 <- lm(runs ~ homeruns, data = mlb11)
summary(m2)
plot(mlb11$runs ~ mlb11$at_bats)
abline(m1)
runs.prediction <- m1$coefficients[[1]] + (m1$coefficients[[2]] * 5578)
round(runs.prediction, 1)
runs.residual <- mlb11$runs[mlb11$at_bats == 5579] - runs.prediction
round(runs.residual,1)
plot(m1$residuals ~ mlb11$at_bats)
abline(h = 0, lty = 3)  # adds a horizontal dashed line at y = 0
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)  # adds diagonal line to the normal prob plot
ggplot(mlb11, aes(x=hits, y=runs)) +
geom_point(colour = 'green') +
geom_smooth(method = 'lm')
m3 <- lm(runs ~ hits, data=mlb11)
summary(m1)
summary(m3)
m4 <- lm(runs ~ bat_avg, data = mlb11)
m5 <- lm(runs ~ strikeouts, data = mlb11)
m6 <- lm(runs ~ stolen_bases, data = mlb11)
m7 <- lm(runs ~ wins, data = mlb11)
m <- c('m1', 'm2', 'm3', 'm4', 'm5', 'm6', 'm7')
r.squared <- c(summary(m1)[[8]], summary(m2)[[8]], summary(m3)[[8]], summary(m4)[[8]], summary(m5)[[8]], summary(m6)[[8]], summary(m7)[[8]])
mdf <- data.frame(m, r.squared)
mdf
m8 <- lm(runs ~ new_onbase, data = mlb11)
m9 <- lm(runs ~ new_slug, data = mlb11)
m10 <- lm(runs ~ new_obs, data = mlb11)
ggplot(mlb11, aes(x=new_onbase, y=runs)) +
geom_point(colour = 'green') +
geom_smooth(method = 'lm')
ggplot(mlb11, aes(x=new_slug, y=runs)) +
geom_point(colour = 'green') +
geom_smooth(method = 'lm')
ggplot(mlb11, aes(x=new_obs, y=runs)) +
geom_point(colour = 'green') +
geom_smooth(method = 'lm')
m.1 <- c('m8', 'm9', 'm10')
r.squared.2 <- c(summary(m8)[[8]], summary(m9)[[8]], summary(m10)[[8]])
mdf.2 <- data.frame(m.1, r.squared.2)
mdf.2
par(mfrow = c(1,2))
hist(m10$residuals)
plot(m10$residuals ~ mlb11$runs)
abline(h = 0, lty = 3)
ggplot(mlb11, aes(x=new_obs, y=runs)) +
geom_point(colour = 'green') +
geom_smooth(method = 'lm')
R.Version()
install.packages(c("backports", "BH", "callr", "curl", "DBI", "dbplyr", "devtools", "digest", "DT", "forcats", "foreach", "git2r", "haven", "hms", "htmlwidgets", "httpuv", "iterators", "knitr", "lava", "lubridate", "openssl", "quanteda", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "reprex", "reshape2", "reticulate", "rlang", "rmarkdown", "rprojroot", "selectr", "slam", "spacyr", "stringr", "tibble", "tidyr", "tidyselect", "tm", "viridisLite", "withr", "wordcloud2", "xml2", "yaml"))
setwd("~/Desktop/project 3/DATA_608_Project_3_q1")
shiny::runApp()
# Read in the dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
library(shiny)
library(tidyverse)
library(plotly)
runApp()
install.packages("plotly")
runApp()
library(plotly)
runApp()
setwd("~/Desktop/project 3/DATA_608_Project_3_q2")
runApp()
runApp()
test <- reshape2::melt(cdc)
View(test)
View(test)
View(cdc)
# Calculate weighted national average for each year
cdc <- cdc %>%
select(-4) %>%
group_by(Year) %>%
mutate(wavg = weighted.mean(Crude.Rate, Population))
View(cdc)
runApp()
test <- reshape2::melt(cdc)
View(test)
runApp()
View(cdc)
View(cdc)
test <- reshape2::melt(cdc)
test <- reshape2::melt(cdc, id.var="Year")
View(test)
test <- reshape2::melt(cdc, id.var=c("State", "Year", "ICD.Chapter"))
runApp()
?runif
test <- gather(cdc)
View(test)
cdc <- gather(cdc)
runApp()
runApp()
View(cdc)
# Read in dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
# Calculate weighted national average for each year
cdc <- cdc %>%
select(-4) %>%
group_by(Year) %>%
mutate(wavg = weighted.mean(Crude.Rate, Population))
View(cdc)
View(cdc)
# Read in dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
# Calculate weighted national average for each year
cdc <- cdc %>%
select(-4) %>%
group_by(Year) %>%
mutate(wavg = weighted.mean(Crude.Rate, Population))
View(cdc)
View(cdc)
View(cdc)
cdc <- cdc %>%
select(-4) %>%
filter(State == input$State, ICD.Chapter == input$Cause)
runApp()
View(cdc)
runApp()
View(cdc)
runApp()
runApp()
shiny::runApp()
library(shiny)
library(tidyverse)
library(plotly)
# Read in dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
# Calculate weighted national average for each year
cdc <- cdc %>%
select(-4) %>%
group_by(Year) %>%
mutate(wavg = weighted.mean(Crude.Rate, Population))
runApp()
View(cdc)
runApp()
View(cdc)
runApp()
# Read in dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
View(cdc)
# Read in dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
View(cdc)
shiny::runApp('~/GitHub/CUNY_MSDS_Semester_2/DATA_608/Project 3/DATA_608_Project_3_q2')
library(shiny)
library(tidyverse)
library(plotly)
runApp('~/GitHub/CUNY_MSDS_Semester_2/DATA_608/Project 3/DATA_608_Project_3_q2')
rm(test)
runApp('~/GitHub/CUNY_MSDS_Semester_2/DATA_608/Project 3/DATA_608_Project_3_q2')
runApp()
runApp()
View(cdc)
cdc <- cdc %>%
select(-4) %>%
filter(State == input$State, ICD.Chapter == input$Cause) %>%
gather(key, value, 4:5)
cdc <- cdc %>%
select(-4) %>%
#filter(State == input$State, ICD.Chapter == input$Cause) %>%
gather(key, value, 4:5)
View(cdc)
cdc["Codes for special purposes
",]
cdc["Codes for special purposes",]
cdc$q == "Codes for special purposes"
cdc$ICD.Chapter == "Codes for special purposes"
any(cdc$ICD.Chapter == "Codes for special purposes")
?any
any(cdc$ICD.Chapter == "Codes for special purposes" && cdc$State == AL)
any(cdc$ICD.Chapter == "Codes for special purposes" && cdc$State == CA)
any(cdc$ICD.Chapter == "Codes for special purposes" && cdc$State == "CA")
any(cdc$ICD.Chapter == "Codes for special purposes" && cdc$State == CA)
any(cdc$ICD.Chapter == "Codes for special purposes" & cdc$State == CA)
any(cdc$ICD.Chapter == "Codes for special purposes" & cdc$State == "CA")
any(cdc$ICD.Chapter == "Codes for special purposes" && cdc$State == "CA")
any(cdc$ICD.Chapter == "Codes for special purposes" & cdc$State == "CA")
any(cdc$ICD.Chapter == "Codes for special purposes" & cdc$State == "AL")
!(any(cdc$ICD.Chapter == "Codes for special purposes" & cdc$State == "AL"))
runApp()
runApp()
setwd("~/GitHub/CUNY_MSDS_Semester_2/DATA_608/Project 3/DATA_608_Project_3_q2")
library(tidyverse)
library(shiny)
library(tidyverse)
library(plotly)
runApp()
