knitr::opts_chunk$set(warning = F, message = F, collapse = T, cache = T)
library(tidyverse)
library(cars)
library(car)
cars
data <- cars
View(data)
?lm
model <- lm(formula = dist ~ speed,
data = data)
summary(model)
library(gridExtra)
rp1 <- ggplot(model, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(title = "Residuals vs Fitted")
rp2 <- ggplot(model, aes(.fitted, .stdresid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE)
rp3 <- ggplot(model) +
stat_qq(aes(sample = .stdresid)) +
geom_abline()
rp4 <- ggplot(model, aes(.fitted, sqrt(abs(.stdresid)))) +
geom_point() +
geom_smooth(se = FALSE) +
labs(title = "Scale-Location")
rp5 <- ggplot(model, aes(seq_along(.cooksd), .cooksd)) +
geom_col() +
ylim(0, 0.0075) +
labs(title = "Cook's Distance")
rp6 <- ggplot(model, aes(.hat, .stdresid)) +
geom_point(aes(size = .cooksd)) +
geom_smooth(se = FALSE, size = 0.5) +
labs(title = "Residuals vs Leverage")
rp7 <- ggplot(model, aes(.hat, .cooksd)) +
geom_vline(xintercept = 0, colour = NA) +
geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") +
geom_smooth(se = FALSE) +
geom_point() +
labs(title = "Cook's distance vs Leverage")
rp8 <- ggplot(model, aes(.resid)) +
geom_histogram(bins = 7, color="darkblue", fill="steelblue")
grid.arrange(rp1, rp2, rp3, rp4, rp5, rp6, rp7, rp8, ncol = 2)
glimpse(data)
?cars
model <- lm(formula = dist ~ speed,
data = data)
summary(model)
str(summary(model))
names(summary(model))
View(summary(model))
summary(model)$coefficients
summary(model)$coefficients[2,4]
updateR()
library(installr)
updateR()
install.packages("pillar")
install.packages("pillar")
load("~/GitHub/DATA_605/Assignment 12/.RData")
install.packages('tinytex', repos = 'https://cran.rstudio.com')
summary(model1)$rsquared
summary(model1)$r.squared
gvlma(model1)
gvlma::gvlma(model1)
gvlma(model1)
library(gvlma)
gvlma(model1)
# Transform variables
m2.LifeExp <- who$LifeExp^(4.6)
m2.TotExp <- who$TotExp^(0.06)
model2 <- lm(formula =  m2.LifeExp ~ m2.TotExp)
# Transform variables
m2.LifeExp <- who$LifeExp^(4.6)
m2.TotExp <- who$TotExp^(0.06)
model2 <- lm(formula =  m2.LifeExp ~ m2.TotExp)
summary(model2)
pplots(model2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, warning = F, message = F, collapse = T)
# Chunk 2: load-libraries
library(tidyverse)
library(knitr)
library(kableExtra)
library(gvlma)
library(gridExtra)
# Chunk 3: import-dataset
who <- read.csv("who.csv", na.strings = c("", "NA", "NaN"))
# Chunk 4: data-dictionary
defs <- c("Name of the country",
"Average life expectancy for the country in years",
"Proportion of those surviving to one year or more",
"Proportion of those surviving to five years or more",
"Proportion of the population without TB",
"Proportion of the population who are MDs",
"Proportion of the population who are RNs",
"Mean personal expenditures on healthcare in US dollars at average exchange rate",
"Mean government expenditures per capita on healthcare, US dollars at average exchange rate",
"Sum of personal and government expenditures")
who.dict <- data.frame(names(who), defs, stringsAsFactors = F)
names(who.dict) <- c("Variable Name", "Definition")
kable(who.dict, format = "latex", booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Chunk 5: predict-plots-function
pplots <- function(model){
rp1 <- ggplot(model, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(title = "Residuals vs Fitted")
rp2 <- ggplot(model, aes(.fitted, .stdresid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE)
rp3 <- ggplot(model) +
stat_qq(aes(sample = .stdresid)) +
geom_abline()
rp4 <- ggplot(model, aes(.fitted, sqrt(abs(.stdresid)))) +
geom_point() +
geom_smooth(se = FALSE) +
labs(title = "Scale-Location")
rp5 <- ggplot(model, aes(seq_along(.cooksd), .cooksd)) +
geom_col() +
ylim(0, 0.0075) +
labs(title = "Cook's Distance")
rp6 <- ggplot(model, aes(.hat, .stdresid)) +
geom_point(aes(size = .cooksd)) +
geom_smooth(se = FALSE, size = 0.5) +
labs(title = "Residuals vs Leverage")
rp7 <- ggplot(model, aes(.hat, .cooksd)) +
geom_vline(xintercept = 0, colour = NA) +
geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") +
geom_smooth(se = FALSE) +
geom_point() +
labs(title = "Cook's distance vs Leverage")
rp8 <- ggplot(model, aes(.resid)) +
geom_histogram(bins = 7, color="darkblue", fill="steelblue")
grid.arrange(rp1, rp2, rp3, rp4, rp5, rp6, rp7, rp8, ncol = 2)
}
# Chunk 6: data-structure
kable(psych::describe(who), format = "latex", booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Chunk 7: scatterplot-lifexp-totexp
ggplot(data = who, aes(x = TotExp, y = LifeExp)) +
geom_point()
# Chunk 8: simple-regression
model1 <- lm(formula =  LifeExp ~ TotExp,
data = who)
summary(model1)
pplots(model1)
# Chunk 9: gvlma-model-one
gvlma(model1)
# Transform variables
m2.LifeExp <- who$LifeExp^(4.6)
m2.TotExp <- who$TotExp^(0.06)
model2 <- lm(formula =  m2.LifeExp ~ m2.TotExp)
summary(model2)
pplots(model2)
str(summary(model2))
summary(model2)$coefficients
summary(model2)$sigma
glimpse(summary(model2))
summary(model2)$sigma
anova(model1, model2)
# Transform variables
m2.LifeExp <- who$LifeExp^(4.6)
m2.TotExp <- who$TotExp^(0.06)
model2 <- lm(formula =  m2.LifeExp ~ m2.TotExp)
summary(model2)
pplots(model2)
gvlma(model2)
str(summary(model2))
âˆ’736527910+620060216*(1.5)
model3 <- lm(formula =  LifeExp ~ propMD + TotExp + propMD*TotExp,
data = who)
summary(model3)
pplots(model3)
gvlma(model3)
View(who)
model3 <- lm(formula =  LifeExp ~ PropMD + TotExp + PropMD*TotExp,
data = who)
summary(model3)
pplots(model3)
gvlma(model3)
plot(model3)
pplots(model3)$3
pplots(model3)$rp3
str(pplots(model3))
as.integer(summary(model3)$coefficients[[1]])
summary(model3)$coefficients[[1]]
range(who$TotExp)
range(who$LifeExp)
View(who)
shiny::runApp('GitHub/DATA_608/Project 3/DATA_608_Project_3_q1')
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("2010 mortality rate by disease per State"),
# Sidebar with a slider input for year selection
sidebarLayout(
sidebarPanel(
# Select input for cause
selectInput("Cause",
"Cause:",
unique(cdc$ICD.Chapter))
),
# Graph bar chart
mainPanel(
plotlyOutput("barPlot")
)
)
))
library(shiny)
library(tidyverse)
library(plotly)
install.packages("plotly")
runApp('GitHub/DATA_608/Project 3/DATA_608_Project_3_q1')
# Read in the dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
# Read in the dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
library(readr)
cleaned_cdc_mortality_1999_2010_2 <- read_csv("GitHub/DATA_608/Project 3/DATA_608_Project_3_q2/cleaned-cdc-mortality-1999-2010-2.csv")
View(cleaned_cdc_mortality_1999_2010_2)
setwd("~/GitHub/DATA_608/Project 3/DATA_608_Project_3_q2")
View(cleaned_cdc_mortality_1999_2010_2)
library(tidyverse)
library(shiny)
library(tidyverse)
library(plotly)
# Read in the dataset
cdc <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv", stringsAsFactors = F)
cdc <- cdc %>%
filter(Year == 2010) %>%
select(1, 2, 6) %>%
group_by(ICD.Chapter)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$barPlot <- renderPlotly({
cdc <- cdc %>%
filter(ICD.Chapter == input$Cause)
p <- ggplot(cdc, aes(x = reorder(State, -Crude.Rate), y = Crude.Rate, fill = Crude.Rate,
text = paste("State:", State, "<br>Crude Rate:", Crude.Rate))) +
geom_bar(stat = "identity") +
ylab(input$Cause) +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_text(angle = 90))
ggplotly(p, tooltip = "text")
})
})
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("2010 mortality rate by disease per State"),
# Sidebar with a slider input for year selection
sidebarLayout(
sidebarPanel(
# Select input for cause
selectInput("Cause",
"Cause:",
unique(cdc$ICD.Chapter))
),
# Graph bar chart
mainPanel(
plotlyOutput("barPlot")
)
)
))
runApp('~/GitHub/DATA_608/Project 3/DATA_608_Project_3_q1')
